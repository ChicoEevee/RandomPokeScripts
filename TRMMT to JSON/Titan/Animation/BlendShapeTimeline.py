# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BlendShapeTimeline(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BlendShapeTimeline()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBlendShapeTimeline(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BlendShapeTimeline
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BlendShapeTimeline
    def Res0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BlendShapeTimeline
    def Res1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BlendShapeTimeline
    def MaterialTrack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Animation.TrackMaterial import TrackMaterial
            obj = TrackMaterial()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BlendShapeTimeline
    def MaterialTrackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BlendShapeTimeline
    def MaterialTrackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # BlendShapeTimeline
    def Unk3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # BlendShapeTimeline
    def Unk4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def BlendShapeTimelineStart(builder):
    builder.StartObject(5)

def Start(builder):
    BlendShapeTimelineStart(builder)

def BlendShapeTimelineAddRes0(builder, res0):
    builder.PrependUint32Slot(0, res0, 0)

def AddRes0(builder, res0):
    BlendShapeTimelineAddRes0(builder, res0)

def BlendShapeTimelineAddRes1(builder, res1):
    builder.PrependUint32Slot(1, res1, 0)

def AddRes1(builder, res1):
    BlendShapeTimelineAddRes1(builder, res1)

def BlendShapeTimelineAddMaterialTrack(builder, materialTrack):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(materialTrack), 0)

def AddMaterialTrack(builder, materialTrack):
    BlendShapeTimelineAddMaterialTrack(builder, materialTrack)

def BlendShapeTimelineStartMaterialTrackVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialTrackVector(builder, numElems: int) -> int:
    return BlendShapeTimelineStartMaterialTrackVector(builder, numElems)

def BlendShapeTimelineAddUnk3(builder, unk3):
    builder.PrependUint8Slot(3, unk3, 0)

def AddUnk3(builder, unk3):
    BlendShapeTimelineAddUnk3(builder, unk3)

def BlendShapeTimelineAddUnk4(builder, unk4):
    builder.PrependUint8Slot(4, unk4, 0)

def AddUnk4(builder, unk4):
    BlendShapeTimelineAddUnk4(builder, unk4)

def BlendShapeTimelineEnd(builder):
    return builder.EndObject()

def End(builder):
    return BlendShapeTimelineEnd(builder)
