# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRACM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRACM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRACM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRACM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRACM
    def Config(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackConfig import TrackConfig
            obj = TrackConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRACM
    def Tracks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Animation.Track import Track
            obj = Track()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRACM
    def TracksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRACM
    def TracksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # TRACM
    def Len1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TRACM
    def Len2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def TRACMStart(builder):
    builder.StartObject(4)

def Start(builder):
    TRACMStart(builder)

def TRACMAddConfig(builder, config):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(config), 0)

def AddConfig(builder, config):
    TRACMAddConfig(builder, config)

def TRACMAddTracks(builder, tracks):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tracks), 0)

def AddTracks(builder, tracks):
    TRACMAddTracks(builder, tracks)

def TRACMStartTracksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTracksVector(builder, numElems: int) -> int:
    return TRACMStartTracksVector(builder, numElems)

def TRACMAddLen1(builder, len1):
    builder.PrependUint8Slot(2, len1, 0)

def AddLen1(builder, len1):
    TRACMAddLen1(builder, len1)

def TRACMAddLen2(builder, len2):
    builder.PrependUint8Slot(3, len2, 0)

def AddLen2(builder, len2):
    TRACMAddLen2(builder, len2)

def TRACMEnd(builder):
    return builder.EndObject()

def End(builder):
    return TRACMEnd(builder)
