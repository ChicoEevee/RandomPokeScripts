# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Track(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Track()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Track
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Track
    def TrackPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track
    def Res1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Track
    def Res2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Track
    def Res3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Track
    def MaterialAnimation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackMaterialTimeline import TrackMaterialTimeline
            obj = TrackMaterialTimeline()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Track
    def MaterialFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackFlags import TrackFlags
            obj = TrackFlags()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Track
    def Blendshape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.BlendShapeTimeline import BlendShapeTimeline
            obj = BlendShapeTimeline()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TrackStart(builder):
    builder.StartObject(7)

def Start(builder):
    TrackStart(builder)

def TrackAddTrackPath(builder, trackPath):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trackPath), 0)

def AddTrackPath(builder, trackPath):
    TrackAddTrackPath(builder, trackPath)

def TrackAddRes1(builder, res1):
    builder.PrependUint32Slot(1, res1, 0)

def AddRes1(builder, res1):
    TrackAddRes1(builder, res1)

def TrackAddRes2(builder, res2):
    builder.PrependUint32Slot(2, res2, 0)

def AddRes2(builder, res2):
    TrackAddRes2(builder, res2)

def TrackAddRes3(builder, res3):
    builder.PrependUint32Slot(3, res3, 0)

def AddRes3(builder, res3):
    TrackAddRes3(builder, res3)

def TrackAddMaterialAnimation(builder, materialAnimation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(materialAnimation), 0)

def AddMaterialAnimation(builder, materialAnimation):
    TrackAddMaterialAnimation(builder, materialAnimation)

def TrackAddMaterialFlags(builder, materialFlags):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(materialFlags), 0)

def AddMaterialFlags(builder, materialFlags):
    TrackAddMaterialFlags(builder, materialFlags)

def TrackAddBlendshape(builder, blendshape):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(blendshape), 0)

def AddBlendshape(builder, blendshape):
    TrackAddBlendshape(builder, blendshape)

def TrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackEnd(builder)
