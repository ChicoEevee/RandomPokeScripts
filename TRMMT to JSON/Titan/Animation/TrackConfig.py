# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrackConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrackConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrackConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TrackConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrackConfig
    def Res0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TrackConfig
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TrackConfig
    def Framerate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TrackConfigStart(builder):
    builder.StartObject(3)

def Start(builder):
    TrackConfigStart(builder)

def TrackConfigAddRes0(builder, res0):
    builder.PrependUint32Slot(0, res0, 0)

def AddRes0(builder, res0):
    TrackConfigAddRes0(builder, res0)

def TrackConfigAddDuration(builder, duration):
    builder.PrependUint32Slot(1, duration, 0)

def AddDuration(builder, duration):
    TrackConfigAddDuration(builder, duration)

def TrackConfigAddFramerate(builder, framerate):
    builder.PrependUint32Slot(2, framerate, 0)

def AddFramerate(builder, framerate):
    TrackConfigAddFramerate(builder, framerate)

def TrackConfigEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackConfigEnd(builder)
