# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrackFlags(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrackFlags()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrackFlags(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TrackFlags
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrackFlags
    def Res0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TrackFlags
    def Res1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TrackFlags
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackFlagsInfo import TrackFlagsInfo
            obj = TrackFlagsInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TrackFlagsStart(builder):
    builder.StartObject(3)

def Start(builder):
    TrackFlagsStart(builder)

def TrackFlagsAddRes0(builder, res0):
    builder.PrependUint32Slot(0, res0, 0)

def AddRes0(builder, res0):
    TrackFlagsAddRes0(builder, res0)

def TrackFlagsAddRes1(builder, res1):
    builder.PrependUint32Slot(1, res1, 0)

def AddRes1(builder, res1):
    TrackFlagsAddRes1(builder, res1)

def TrackFlagsAddInfo(builder, info):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)

def AddInfo(builder, info):
    TrackFlagsAddInfo(builder, info)

def TrackFlagsEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackFlagsEnd(builder)
