# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Animation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrackMaterialChannels(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrackMaterialChannels()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrackMaterialChannels(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TrackMaterialChannels
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrackMaterialChannels
    def Red(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackMaterialValueList import TrackMaterialValueList
            obj = TrackMaterialValueList()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrackMaterialChannels
    def Green(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackMaterialValueList import TrackMaterialValueList
            obj = TrackMaterialValueList()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrackMaterialChannels
    def Blue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackMaterialValueList import TrackMaterialValueList
            obj = TrackMaterialValueList()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrackMaterialChannels
    def Alpha(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Animation.TrackMaterialValueList import TrackMaterialValueList
            obj = TrackMaterialValueList()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TrackMaterialChannelsStart(builder):
    builder.StartObject(4)

def Start(builder):
    TrackMaterialChannelsStart(builder)

def TrackMaterialChannelsAddRed(builder, red):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(red), 0)

def AddRed(builder, red):
    TrackMaterialChannelsAddRed(builder, red)

def TrackMaterialChannelsAddGreen(builder, green):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(green), 0)

def AddGreen(builder, green):
    TrackMaterialChannelsAddGreen(builder, green)

def TrackMaterialChannelsAddBlue(builder, blue):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blue), 0)

def AddBlue(builder, blue):
    TrackMaterialChannelsAddBlue(builder, blue)

def TrackMaterialChannelsAddAlpha(builder, alpha):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(alpha), 0)

def AddAlpha(builder, alpha):
    TrackMaterialChannelsAddAlpha(builder, alpha)

def TrackMaterialChannelsEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackMaterialChannelsEnd(builder)
