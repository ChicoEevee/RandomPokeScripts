# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EmbeddedTRACM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EmbeddedTRACM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEmbeddedTRACM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EmbeddedTRACM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EmbeddedTRACM
    def Bytebuffer(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EmbeddedTRACM
    def BytebufferAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # EmbeddedTRACM
    def BytebufferLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EmbeddedTRACM
    def BytebufferIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def EmbeddedTRACMStart(builder):
    builder.StartObject(1)

def Start(builder):
    EmbeddedTRACMStart(builder)

def EmbeddedTRACMAddBytebuffer(builder, bytebuffer):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bytebuffer), 0)

def AddBytebuffer(builder, bytebuffer):
    EmbeddedTRACMAddBytebuffer(builder, bytebuffer)

def EmbeddedTRACMStartBytebufferVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartBytebufferVector(builder, numElems: int) -> int:
    return EmbeddedTRACMStartBytebufferVector(builder, numElems)

def EmbeddedTRACMEnd(builder):
    return builder.EndObject()

def End(builder):
    return EmbeddedTRACMEnd(builder)
