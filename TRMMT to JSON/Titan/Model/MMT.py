# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MMT(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MMT()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMMT(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MMT
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MMT
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MMT
    def MaterialName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MMT
    def MaterialNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMT
    def MaterialNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MMT
    def MaterialSwitches(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MaterialSwitches import MaterialSwitches
            obj = MaterialSwitches()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMT
    def MaterialSwitchesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMT
    def MaterialSwitchesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # MMT
    def MaterialProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MaterialProperties import MaterialProperties
            obj = MaterialProperties()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MMT
    def MaterialPropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MMT
    def MaterialPropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def MMTStart(builder):
    builder.StartObject(4)

def Start(builder):
    MMTStart(builder)

def MMTAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MMTAddName(builder, name)

def MMTAddMaterialName(builder, materialName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(materialName), 0)

def AddMaterialName(builder, materialName):
    MMTAddMaterialName(builder, materialName)

def MMTStartMaterialNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialNameVector(builder, numElems: int) -> int:
    return MMTStartMaterialNameVector(builder, numElems)

def MMTAddMaterialSwitches(builder, materialSwitches):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(materialSwitches), 0)

def AddMaterialSwitches(builder, materialSwitches):
    MMTAddMaterialSwitches(builder, materialSwitches)

def MMTStartMaterialSwitchesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialSwitchesVector(builder, numElems: int) -> int:
    return MMTStartMaterialSwitchesVector(builder, numElems)

def MMTAddMaterialProperties(builder, materialProperties):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(materialProperties), 0)

def AddMaterialProperties(builder, materialProperties):
    MMTAddMaterialProperties(builder, materialProperties)

def MMTStartMaterialPropertiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialPropertiesVector(builder, numElems: int) -> int:
    return MMTStartMaterialPropertiesVector(builder, numElems)

def MMTEnd(builder):
    return builder.EndObject()

def End(builder):
    return MMTEnd(builder)
