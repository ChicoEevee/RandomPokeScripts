# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MaterialProperties(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MaterialProperties()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMaterialProperties(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MaterialProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MaterialProperties
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MaterialProperties
    def Mappers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MaterialMapper import MaterialMapper
            obj = MaterialMapper()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialProperties
    def MappersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialProperties
    def MappersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MaterialProperties
    def Res2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MaterialProperties
    def Unk3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MaterialProperties
    def Tracm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Titan.Model.EmbeddedTRACM import EmbeddedTRACM
            obj = EmbeddedTRACM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialProperties
    def Res5(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MaterialProperties
    def Res5AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # MaterialProperties
    def Res5Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialProperties
    def Res5IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def MaterialPropertiesStart(builder):
    builder.StartObject(6)

def Start(builder):
    MaterialPropertiesStart(builder)

def MaterialPropertiesAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MaterialPropertiesAddName(builder, name)

def MaterialPropertiesAddMappers(builder, mappers):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mappers), 0)

def AddMappers(builder, mappers):
    MaterialPropertiesAddMappers(builder, mappers)

def MaterialPropertiesStartMappersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMappersVector(builder, numElems: int) -> int:
    return MaterialPropertiesStartMappersVector(builder, numElems)

def MaterialPropertiesAddRes2(builder, res2):
    builder.PrependUint32Slot(2, res2, 0)

def AddRes2(builder, res2):
    MaterialPropertiesAddRes2(builder, res2)

def MaterialPropertiesAddUnk3(builder, unk3):
    builder.PrependUint32Slot(3, unk3, 0)

def AddUnk3(builder, unk3):
    MaterialPropertiesAddUnk3(builder, unk3)

def MaterialPropertiesAddTracm(builder, tracm):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tracm), 0)

def AddTracm(builder, tracm):
    MaterialPropertiesAddTracm(builder, tracm)

def MaterialPropertiesAddRes5(builder, res5):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(res5), 0)

def AddRes5(builder, res5):
    MaterialPropertiesAddRes5(builder, res5)

def MaterialPropertiesStartRes5Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRes5Vector(builder, numElems: int) -> int:
    return MaterialPropertiesStartRes5Vector(builder, numElems)

def MaterialPropertiesEnd(builder):
    return builder.EndObject()

def End(builder):
    return MaterialPropertiesEnd(builder)
