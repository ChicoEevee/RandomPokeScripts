# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Model

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TRMMT(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TRMMT()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTRMMT(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TRMMT
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TRMMT
    def Res0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRMMT
    def Res1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TRMMT
    def Material(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Titan.Model.MMT import MMT
            obj = MMT()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TRMMT
    def MaterialLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TRMMT
    def MaterialIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def TRMMTStart(builder):
    builder.StartObject(3)

def Start(builder):
    TRMMTStart(builder)

def TRMMTAddRes0(builder, res0):
    builder.PrependUint32Slot(0, res0, 0)

def AddRes0(builder, res0):
    TRMMTAddRes0(builder, res0)

def TRMMTAddRes1(builder, res1):
    builder.PrependUint32Slot(1, res1, 0)

def AddRes1(builder, res1):
    TRMMTAddRes1(builder, res1)

def TRMMTAddMaterial(builder, material):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(material), 0)

def AddMaterial(builder, material):
    TRMMTAddMaterial(builder, material)

def TRMMTStartMaterialVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMaterialVector(builder, numElems: int) -> int:
    return TRMMTStartMaterialVector(builder, numElems)

def TRMMTEnd(builder):
    return builder.EndObject()

def End(builder):
    return TRMMTEnd(builder)
